// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package nw

import (
	"fmt"
	"strings"
)

const (
	// MsgAuth is a MessageHeader of type MsgAuth.
	MsgAuth MessageHeader = iota
	// MsgAuthAck is a MessageHeader of type MsgAuthAck.
	MsgAuthAck
	// MsgConnect is a MessageHeader of type MsgConnect.
	MsgConnect
	// MsgDisconnect is a MessageHeader of type MsgDisconnect.
	MsgDisconnect
	// MsgLobbyCreate is a MessageHeader of type MsgLobbyCreate.
	MsgLobbyCreate
	// MsgLobbyCreated is a MessageHeader of type MsgLobbyCreated.
	MsgLobbyCreated
	// MsgLobbyDeleted is a MessageHeader of type MsgLobbyDeleted.
	MsgLobbyDeleted
	// MsgLobbyGameStart is a MessageHeader of type MsgLobbyGameStart.
	MsgLobbyGameStart
	// MsgLobbyClientReady is a MessageHeader of type MsgLobbyClientReady.
	MsgLobbyClientReady
	// MsgLobbyClientJoin is a MessageHeader of type MsgLobbyClientJoin.
	MsgLobbyClientJoin
	// MsgLobbyClientLeave is a MessageHeader of type MsgLobbyClientLeave.
	MsgLobbyClientLeave
	// MsgClientInput is a MessageHeader of type MsgClientInput.
	MsgClientInput
	// MsgServerState is a MessageHeader of type MsgServerState.
	MsgServerState
)

const _MessageHeaderName = "MsgAuthMsgAuthAckMsgConnectMsgDisconnectMsgLobbyCreateMsgLobbyCreatedMsgLobbyDeletedMsgLobbyGameStartMsgLobbyClientReadyMsgLobbyClientJoinMsgLobbyClientLeaveMsgClientInputMsgServerState"

var _MessageHeaderMap = map[MessageHeader]string{
	MsgAuth:             _MessageHeaderName[0:7],
	MsgAuthAck:          _MessageHeaderName[7:17],
	MsgConnect:          _MessageHeaderName[17:27],
	MsgDisconnect:       _MessageHeaderName[27:40],
	MsgLobbyCreate:      _MessageHeaderName[40:54],
	MsgLobbyCreated:     _MessageHeaderName[54:69],
	MsgLobbyDeleted:     _MessageHeaderName[69:84],
	MsgLobbyGameStart:   _MessageHeaderName[84:101],
	MsgLobbyClientReady: _MessageHeaderName[101:120],
	MsgLobbyClientJoin:  _MessageHeaderName[120:138],
	MsgLobbyClientLeave: _MessageHeaderName[138:157],
	MsgClientInput:      _MessageHeaderName[157:171],
	MsgServerState:      _MessageHeaderName[171:185],
}

// String implements the Stringer interface.
func (x MessageHeader) String() string {
	if str, ok := _MessageHeaderMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MessageHeader(%d)", x)
}

var _MessageHeaderValue = map[string]MessageHeader{
	_MessageHeaderName[0:7]:                      MsgAuth,
	strings.ToLower(_MessageHeaderName[0:7]):     MsgAuth,
	_MessageHeaderName[7:17]:                     MsgAuthAck,
	strings.ToLower(_MessageHeaderName[7:17]):    MsgAuthAck,
	_MessageHeaderName[17:27]:                    MsgConnect,
	strings.ToLower(_MessageHeaderName[17:27]):   MsgConnect,
	_MessageHeaderName[27:40]:                    MsgDisconnect,
	strings.ToLower(_MessageHeaderName[27:40]):   MsgDisconnect,
	_MessageHeaderName[40:54]:                    MsgLobbyCreate,
	strings.ToLower(_MessageHeaderName[40:54]):   MsgLobbyCreate,
	_MessageHeaderName[54:69]:                    MsgLobbyCreated,
	strings.ToLower(_MessageHeaderName[54:69]):   MsgLobbyCreated,
	_MessageHeaderName[69:84]:                    MsgLobbyDeleted,
	strings.ToLower(_MessageHeaderName[69:84]):   MsgLobbyDeleted,
	_MessageHeaderName[84:101]:                   MsgLobbyGameStart,
	strings.ToLower(_MessageHeaderName[84:101]):  MsgLobbyGameStart,
	_MessageHeaderName[101:120]:                  MsgLobbyClientReady,
	strings.ToLower(_MessageHeaderName[101:120]): MsgLobbyClientReady,
	_MessageHeaderName[120:138]:                  MsgLobbyClientJoin,
	strings.ToLower(_MessageHeaderName[120:138]): MsgLobbyClientJoin,
	_MessageHeaderName[138:157]:                  MsgLobbyClientLeave,
	strings.ToLower(_MessageHeaderName[138:157]): MsgLobbyClientLeave,
	_MessageHeaderName[157:171]:                  MsgClientInput,
	strings.ToLower(_MessageHeaderName[157:171]): MsgClientInput,
	_MessageHeaderName[171:185]:                  MsgServerState,
	strings.ToLower(_MessageHeaderName[171:185]): MsgServerState,
}

// ParseMessageHeader attempts to convert a string to a MessageHeader.
func ParseMessageHeader(name string) (MessageHeader, error) {
	if x, ok := _MessageHeaderValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _MessageHeaderValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return MessageHeader(0), fmt.Errorf("%s is not a valid MessageHeader", name)
}

// MarshalText implements the text marshaller method.
func (x MessageHeader) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MessageHeader) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseMessageHeader(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

func MessageHeaderValues() []MessageHeader {
	values := make([]MessageHeader, 0, len(_MessageHeaderValue))
	for v := range _MessageHeaderMap {
		values = append(values, v)
	}
	return values
}

func (x *MessageHeader) UnmarshalJSON(data []byte) error {
	return x.UnmarshalText(data)
}

func (x MessageHeader) MarshalJSON() ([]byte, error) {
	s, err := x.MarshalText()
	if err != nil {
		return nil, err
	}
	return []byte(`"` + string(s) + `"`), nil
}
