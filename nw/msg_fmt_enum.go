// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package nw

import (
	"fmt"
	"strings"
)

const (
	// FmtText is a MessageFmt of type FmtText.
	FmtText MessageFmt = iota
	// FmtJSON is a MessageFmt of type FmtJSON.
	FmtJSON
	// FmtBinary is a MessageFmt of type FmtBinary.
	FmtBinary
)

const _MessageFmtName = "FmtTextFmtJSONFmtBinary"

var _MessageFmtMap = map[MessageFmt]string{
	FmtText:   _MessageFmtName[0:7],
	FmtJSON:   _MessageFmtName[7:14],
	FmtBinary: _MessageFmtName[14:23],
}

// String implements the Stringer interface.
func (x MessageFmt) String() string {
	if str, ok := _MessageFmtMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MessageFmt(%d)", x)
}

var _MessageFmtValue = map[string]MessageFmt{
	_MessageFmtName[0:7]:                    FmtText,
	strings.ToLower(_MessageFmtName[0:7]):   FmtText,
	_MessageFmtName[7:14]:                   FmtJSON,
	strings.ToLower(_MessageFmtName[7:14]):  FmtJSON,
	_MessageFmtName[14:23]:                  FmtBinary,
	strings.ToLower(_MessageFmtName[14:23]): FmtBinary,
}

// ParseMessageFmt attempts to convert a string to a MessageFmt.
func ParseMessageFmt(name string) (MessageFmt, error) {
	if x, ok := _MessageFmtValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _MessageFmtValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return MessageFmt(0), fmt.Errorf("%s is not a valid MessageFmt", name)
}

// MarshalText implements the text marshaller method.
func (x MessageFmt) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MessageFmt) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseMessageFmt(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

func MessageFmtValues() []MessageFmt {
	values := make([]MessageFmt, 0, len(_MessageFmtValue))
	for v := range _MessageFmtMap {
		values = append(values, v)
	}
	return values
}

func (x *MessageFmt) UnmarshalJSON(data []byte) error {
	return x.UnmarshalText(data)
}

func (x MessageFmt) MarshalJSON() ([]byte, error) {
	s, err := x.MarshalText()
	if err != nil {
		return nil, err
	}
	return []byte(`"` + string(s) + `"`), nil
}
